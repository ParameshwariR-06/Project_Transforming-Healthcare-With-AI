# -*- coding: utf-8 -*-
"""Project Phase 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VQwmled78AUPHT2jyqU6SPWBY3xF_IsJ
"""



"""Upload the Dataset"""

from google.colab import files
uploaded = files.upload()

"""Load the Dataset"""

import pandas as pd

# Define data manually
data = {
    'Patient_ID': [101, 102, 103, 104],
    'Age': [45, 60, 30, 50],
    'Gender': ['Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined']
}

# Create DataFrame
df = pd.DataFrame(data)

# Display the dataset
print("Transforming Healthcare Dataset (Manually Created):")
print(df)

"""Data Exploration"""

# Display first few rows
df.head()

"""Check for Missing Values and Duplicates"""

# Check for missing values
print(df.isnull().sum())
# Check for duplicates
print("Duplicate rows:", df.duplicated().sum())

"""Visualize a Few Features"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Define the data
data = {
    'Patient_ID': [101, 102, 103, 104, 105, 106, 107, 108],
    'Age': [45, 60, 30, 50, 39, 67, 28, 55],
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular', 'Diabetes', 'Asthma', 'Hypertension', 'Diabetes'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person', 'Telemedicine', 'Remote Monitoring', 'In-person', 'Telemedicine'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined', 'Improved', 'Stable', 'Improved', 'Declined']
}

# Create DataFrame
df = pd.DataFrame(data)

# Set style
sns.set(style="whitegrid")

# 1. Age Distribution
plt.figure(figsize=(6, 4))
sns.histplot(df['Age'], bins=5, kde=True, color='skyblue')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# 2. Treatment Type Count
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Treatment_Type', palette='Set2')
plt.title('Count of Patients by Treatment Type')
plt.xlabel('Treatment Type')
plt.ylabel('Count')
plt.xticks(rotation=15)
plt.show()

# 3. Outcome by Gender
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Gender', hue='Outcome', palette='pastel')
plt.title('Treatment Outcome by Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.legend(title='Outcome')
plt.show()

"""Identify Target and Features"""

import pandas as pd

# Define the dataset
data = {
    'Patient_ID': [101, 102, 103, 104, 105, 106, 107, 108],
    'Age': [45, 60, 30, 50, 39, 67, 28, 55],
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular', 'Diabetes', 'Asthma', 'Hypertension', 'Diabetes'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person', 'Telemedicine', 'Remote Monitoring', 'In-person', 'Telemedicine'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined', 'Improved', 'Stable', 'Improved', 'Declined']
}

# Create a DataFrame
df = pd.DataFrame(data)

# Identify target and features
target = 'Outcome'
features = df.drop(columns=['Patient_ID', target])  # Exclude ID and target
target_values = df[target]

# Display results
print("ðŸŽ¯ Target Variable:")
print(target)
print("\nâœ… Features:")
print(features.columns.tolist())

print("\nðŸ“Š Feature Data Sample:")
print(features.head())

print("\nðŸŽ¯ Target Values Sample:")
print(target_values.head())

"""Convert Categorical Columns to Numerical"""

# Identify categorical columns
categorical_cols = df.select_dtypes(include=['object']).columns
print("Categorical Columns:", categorical_cols.tolist())

"""One-Hot Encoding"""

df_encoded = pd.get_dummies(df, drop_first=True)

"""Feature Scaling"""

import pandas as pd
from sklearn.preprocessing import StandardScaler, MinMaxScaler

# Define the dataset
data = {
    'Patient_ID': [101, 102, 103, 104, 105, 106, 107, 108],
    'Age': [45, 60, 30, 50, 39, 67, 28, 55],
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular', 'Diabetes', 'Asthma', 'Hypertension', 'Diabetes'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person', 'Telemedicine', 'Remote Monitoring', 'In-person', 'Telemedicine'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined', 'Improved', 'Stable', 'Improved', 'Declined']
}

# Create DataFrame
df = pd.DataFrame(data)

# Feature scaling for numerical columns
features = df[['Age']]  # Only scaling 'Age' (numerical feature)

# Standardization (z-score normalization)
scaler_standard = StandardScaler()
df['Age_standardized'] = scaler_standard.fit_transform(features)

# Min-Max Scaling
scaler_minmax = MinMaxScaler()
df['Age_minmax'] = scaler_minmax.fit_transform(features)

# Display the scaled features
print("Original DataFrame with Scaled Features:")
print(df[['Patient_ID', 'Age', 'Age_standardized', 'Age_minmax']])

"""Train-Test Split"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Define the dataset
data = {
    'Patient_ID': [101, 102, 103, 104, 105, 106, 107, 108],
    'Age': [45, 60, 30, 50, 39, 67, 28, 55],
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular', 'Diabetes', 'Asthma', 'Hypertension', 'Diabetes'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person', 'Telemedicine', 'Remote Monitoring', 'In-person', 'Telemedicine'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined', 'Improved', 'Stable', 'Improved', 'Declined']
}

# Create DataFrame
df = pd.DataFrame(data)

# Encode categorical columns using LabelEncoder
label_encoder = LabelEncoder()

# Encoding 'Gender', 'Diagnosis', 'Treatment_Type', and 'Outcome'
df['Gender'] = label_encoder.fit_transform(df['Gender'])
df['Diagnosis'] = label_encoder.fit_transform(df['Diagnosis'])
df['Treatment_Type'] = label_encoder.fit_transform(df['Treatment_Type'])
df['Outcome'] = label_encoder.fit_transform(df['Outcome'])  # Target variable

# Features and target
X = df[['Age', 'Gender', 'Diagnosis', 'Treatment_Type']]  # Features
y = df['Outcome']  # Target variable

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Display train and test sets
print("Training Features (X_train):")
print(X_train)
print("\nTesting Features (X_test):")
print(X_test)

print("\nTraining Target (y_train):")
print(y_train)
print("\nTesting Target (y_test):")
print(y_test)

"""Model Building"""

# Train model
model = LinearRegression()
model.fit(X_train, y_train)
# Predict
y_pred = model.predict(X_test)

"""Evaluation"""

# Evaluate
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

"""Make Predictions from New Input"""

# Sample input (replace values with any other valid values from the original dataset)
new_student = {
'school': 'GP', # 'GP' or 'MS'
'sex': 'F', # 'F' or 'M'
'age': 17, # Integer
'address': 'U', # 'U' or 'R'
'famsize': 'GT3', # 'LE3' or 'GT3'
'Pstatus': 'A', # 'A' or 'T'
'Medu': 4, # 0 to 4
'Fedu': 3, # 0 to 4
'Mjob': 'health', # 'teacher', 'health', etc.
'Fjob': 'services',
'reason': 'course',
'guardian': 'mother',
'traveltime': 2,
'studytime': 3,
'failures': 0,
'schoolsup': 'yes',
'famsup': 'no',
'paid': 'no',
'activities': 'yes',
'nursery': 'yes',
'higher': 'yes',
'internet': 'yes',
'romantic': 'no',
'famrel': 4,
'freetime': 3,
'goout': 3,
'Dalc': 1,
'Walc': 1,
'health': 4,
'absences': 2,
                'G1': 14,
'G2': 15
}

"""Convert to DataFrame and Encode"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Define the dataset
data = {
    'Patient_ID': [101, 102, 103, 104, 105, 106, 107, 108],
    'Age': [45, 60, 30, 50, 39, 67, 28, 55],
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular', 'Diabetes', 'Asthma', 'Hypertension', 'Diabetes'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person', 'Telemedicine', 'Remote Monitoring', 'In-person', 'Telemedicine'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined', 'Improved', 'Stable', 'Improved', 'Declined']
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Display the original DataFrame
print("Original DataFrame:")
print(df)

# Encode categorical columns using LabelEncoder
label_encoder = LabelEncoder()

# Encoding 'Gender', 'Diagnosis', 'Treatment_Type', and 'Outcome'
df['Gender'] = label_encoder.fit_transform(df['Gender'])
df['Diagnosis'] = label_encoder.fit_transform(df['Diagnosis'])
df['Treatment_Type'] = label_encoder.fit_transform(df['Treatment_Type'])
df['Outcome'] = label_encoder.fit_transform(df['Outcome'])  # Target variable

# Display the DataFrame after encoding
print("\nDataFrame After Encoding:")
print(df)

"""Predict the Final Grade"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Define the dataset (using a small sample for illustration)
data = {
    'Patient_ID': [101, 102, 103, 104, 105, 106, 107, 108],
    'Age': [45, 60, 30, 50, 39, 67, 28, 55],
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],
    'Diagnosis': ['Diabetes', 'Hypertension', 'Asthma', 'Cardiovascular', 'Diabetes', 'Asthma', 'Hypertension', 'Diabetes'],
    'Treatment_Type': ['Telemedicine', 'In-person', 'Remote Monitoring', 'In-person', 'Telemedicine', 'Remote Monitoring', 'In-person', 'Telemedicine'],
    'Outcome': ['Improved', 'Stable', 'Improved', 'Declined', 'Improved', 'Stable', 'Improved', 'Declined']
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Encode categorical variables using LabelEncoder
label_encoder = LabelEncoder()

# Encode the categorical columns
df['Gender'] = label_encoder.fit_transform(df['Gender'])
df['Diagnosis'] = label_encoder.fit_transform(df['Diagnosis'])
df['Treatment_Type'] = label_encoder.fit_transform(df['Treatment_Type'])
df['Outcome'] = label_encoder.fit_transform(df['Outcome'])  # Target variable

# Define features (X) and target (y)
X = df[['Age', 'Gender', 'Diagnosis', 'Treatment_Type']]  # Features
y = df['Outcome']  # Target (Outcome)

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize Logistic Regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)

# Display results
print("Model Accuracy: {:.2f}%".format(accuracy * 100))

# Display predictions
print("\nPredictions on Test Data:")
for i, pred in enumerate(y_pred):
    print(f"Test Sample {i + 1}: Predicted Outcome = {label_encoder.inverse_transform([pred])[0]}")

"""Deployment-Building an Interactive App"""

!pip install gradio